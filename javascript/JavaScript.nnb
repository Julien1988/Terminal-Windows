{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# Les Variables\r\n\r\n\r\n "
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Les variables sont utilisées pour stocker des informations qui peuvent être référencées et manipulées dans un programme informatique. Elles fournissent également un moyen d'étiqueter les données avec un nom descriptif, de sorte que nos programmes puissent être compris plus clairement par le lecteur et nous-mêmes.\r\n\r\nIl est utile de penser aux variables comme des conteneurs qui contiennent des informations. Leur seul but est d'étiqueter et de stocker des données en mémoire. Ces données peuvent ensuite être utilisées tout au long de votre programme."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Déclarer des variables\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Pour déclarer une variable, utilisez le mot clé **`let`**, suivi d'un nom, généralement en camel case (par exemple: myVariable)."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let myVariable;          // JavaScript crée une variable appelée myVariable qui ne contient aucune valeur"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Assigner une valeur à une variable\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Avoir une variable est bien, mais quel est l'intérêt si elle ne contient aucune valeur ?\r\n\r\nPour assigner une valeur à une variable, il suffit d'écrire le nom de la variable suivi d'un signe égal (=) et enfin de la valeur que vous souhaitez lui attribuer."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let myAge;                  // Déclare une variable nommée 'myAge'\nmyAge = 17;                 // Attribue la valeur 17 à la variable\n\nlet myName = \"John\";        // Déclare une variable nommée 'myName' et assigne la valeur \"John\""
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "> *Notez que vous pouvez déclarer une variable sans lui attribuer de valeur. Par défaut, une variable sans valeur est égale à **`undefined`**.*"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Les Variables Constante"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Les variables `const` sont similaires aux variables `let`, à l'exception qu'elles ne peuvent pas être modifiées. Elles sont déclarées de la même manière que les variables let, mais elles doivent impérativement être attribuées une valeur (Puisque vous ne pouvez pas modifier la valeur, une fois déclarée, il est obliger de lui attribuer une valeur)."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const superSecretPassword = \"password123\";  // tout va bien\r\n\r\nsuperSecretPassword = \"newpassword\";        // ! Cela générera une erreur !\r\n\r\nconst newPassword;                          // ! Une variable const ne peut pas être déclarée sans être assignée une valeur !"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Les Types de Valeurs\r\n\r\n\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Lorsqu'une variable est créée, son type est déduit à partir de la valeur qui lui est attribuée.\r\n\r\nVoici les différents types de valeurs :\r\n\r\n| Type    \t                        | Valeur                 \t| Exemple       \t    |\r\n|---------\t                        |-----------------------\t|---------------\t    |\r\n| Boolean (Booléen)\t                | `True` ou `False`         | `True`          \t    |\r\n| Number (Nombre) \t                | N'importe quel nombre     | `-56.2`         \t    |\r\n| String (Chaîne de caractères)  \t| Une chaîne de caractères \t| `\"Bonjour le monde\"` \t|\r\n\r\n> Note : une valeur de chaîne de caractères sera toujours entre guillemets simples/doubles."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let myName = \"John\";        // String\r\nlet myAge = 17;             // Number\r\nlet isMajor = false;        // Boolean"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Utiliser les variables\r\n\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Très bien ! Maintenant vous savez comment créer des variables et comment leur attribuer une valeur. Mais que peut-on faire avec elles ?\r\n\r\nTout d'abord, essayons de modifier la valeur d'une variable."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let myName = \"John\";\r\nlet myAge = 17;         \r\nlet isMajor = false; \r\n\r\nmyName = \"Johnathan\";\r\nmyAge = myAge + 6;\r\nisMajor = true;"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Beaucoup de choses se passent ; la variable 'myName' reçoit une nouvelle valeur, quelque chose d'étrange se produit avec la valeur 'myAge' et 'isMajor' se voit également attribuer une nouvelle valeur.\r\n\r\nConcentrons-nous sur la variable 'myAge' :"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let myAge = 17;\r\n\r\nmyAge = myAge + 6"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "La variable est déclarée et se voit attribuer la valeur `17`.\r\nEnsuite, nous attribuons à la variable la valeur `myAge + 6`.\r\n\r\nDans ce cas, l'ordinateur comprendra cela de la manière suivante :"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let myAge = 17;\r\n\r\nmyAge = 17 + 6;  // myAge = myAge + 6 "
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Comme vous pouvez le voir, `myAge` est remplacé par sa propre valeur et `6` lui est ajouté. Et finalement, la valeur obtenue est assignée à myAge.\r\n\r\nCela se produit parce que le symbole égal ( = ) ne signifie pas \"égal\" mais plutôt \"attribuer à\".\r\n\r\nEn mathématiques, il n'est pas possible qu'une valeur soit égale à elle-même plus 6. Mais en programmation, puisque le symbole signifie **attribuer** plutôt que **être égal à**, nous attribuons la valeur de `myAge + 6` à `myAge`.\r\n\r\n=> Cela revient à simplement ajouter +6 à la valeur de myAge.\r\n\r\nVoici une façon plus simple d'incrémenter une variable :"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let myAge = 17;\r\n\r\nmyAge += 6;      // equivalent of doing: myAge = myAge + 6"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "`myAge` est égal à `23` "
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Les opérateurs"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "\r\n\r\n| Operator  | Description                   | Example           |\r\n|---------\t|-----------------------        |---------------    |\r\n| +         | Addition                      | `4 + 8` => 12     |\r\n| -         | Soustraction                  | `4 - 3` => 1      |\r\n| * \t    | Multpiplication \t  \t        | `4*2` => 8        |\r\n| / \t    | Division \t         \t        | `4/2` => 2        |\r\n| += \t    | Addition et assignation \t    | `let x = 10;` <br> `x += 5` <br> x est égal a 15  |\r\n| -= \t    | Soustraction et assignation   | `let x = 10;` <br> `x -= 5` <br> x est égal a 5   |\r\n| *= \t    | Multiplication et assignation | `let x = 10;` <br> `x *= 5` <br> x est égal a 50  |\r\n| /= \t    | Division et assignation       | `let x = 10;` <br> `x /= 5` <br> x est égal a 2   |\r\n| ++        | Incrementation                | `let x = 10;` <br> `x++;`   <br> x est égal a 11  |\r\n| --        | Decrementation                | `let x = 10;` <br> `x--;`   <br> x est égal a 9   |\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Les Fonctions"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Une fonction est simplement un \"morceau\" de code que vous pouvez utiliser, plutôt que de l'écrire plusieurs fois. Les fonctions permettent aux programmeurs de décomposer un problème en morceaux plus petits, chacun effectuant une tâche particulière.\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Créer une fonction"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Pour créer une fonction, utilisez le mot-clé `function` suivi d'un nom (en camelCase) avec des parenthèses à la fin, et enfin un bloc de code (représenté par des accolades: { } )."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function myFunction() { \r\n    \r\n}"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Pour utiliser une fonction, écrivez le nom de la fonction suivi de parenthèses."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function myFunction() {\r\n\r\n}\r\n\r\nmyFunction();"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Ici, l'ordinateur crée une fonction, puis l'exécute. Mais lorsque vous exécutez ce code, rien ne se passe, alors essayons d'ajouter une fonctionnalité!"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function meow() {\n    console.log(\"meow\");\n}\n\nmeow();"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Si vous exécutez le code ci-dessus, \"meow\" sera imprimé sur la console à chaque fois que la fonction meow est appelée.\r\n\r\nMais concentrons-nous sur la deuxième ligne."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "console.log(\"meow\");"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "C'est quoi exactement ce qui se passe ici ?\r\n\r\n`console` est ce qu'on appelle un **objet** (nous parlerons d'objets plus tard) et `log()` est une **méthode** de cet objet.\r\n\r\nLes **méthodes** sont simplement des **fonctions** contenues dans un objet.\r\n\r\nImaginez un objet comme une grosse boîte qui contient des `variables` et des `fonctions`, pour accéder au contenu d'un objet, il suffit d'écrire le nom de cet objet suivi d'un point (.) et de la fonction souhaitée.\r\n\r\nDans l'exemple ci-dessus, nous appelons la méthode `log()` de l'objet `console` et nous donnons `\"meow\"` comme **paramètre**.\r\n\r\nLorsqu'il est exécuté, \"meow\" sera affiché dans la console."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Les Paramètres"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "#### Donner des paramètres"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Pour donner un paramètre a une fonction, écriver le nom d'une variable ou, dans ce cas ci, une valeur."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "console.log(\"meow\");"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Nous donnons ici les données `\"meow\"` de type `string` (voir [Types de valeurs](#les-types-de-valeurs)) à la fonction `log()`.\r\n\r\nEssayons de donner des variables à la place."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let myName = \"John\";\r\n\r\nconsole.log(myName);"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Ceci affichera `\"John\"` dans la console. Mais que faire si nous voulions dire `\"Bonjour John\"` plutôt que de simplement mentionner le nom de la personne ?\r\n\r\nPour ce faire, nous pourrions donner `\"Bonjour \" + myName` en tant que paramètre pour la fonction."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let myName = \"John\";\r\n\r\nconsole.log(\"Bonjour \" + myName);"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Remarqué l'espace a la fin de \"Bonjour\", sans celui ci, la console aurait écrit \"BonjourJohn\" au lieu de \"Bonjour John\"\r\nParfait ! Maintenant, essayons de ~~doxxer~~ tout dire sur John. "
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let myName = \"John\"\r\nlet myAge = 17;\r\nlet address = \"Rue de Landen 53A, 4280 Hannut\";     // Oui, John habbite au McDo de hannut \r\n\r\nconsole.log(\"Bonjour, je m'appelle \" + myName + \", J'ai \" + myAge + \" ans et j'habite à \" + address);"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Cela fonctionne, mais c'est très fastidieux à écrire.\r\n\r\nUne autre façon d'obtenir le même résultat est d'utiliser **l'interpolation de chaîne** (String Interpolation en anglais)."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let myName = \"John\";\r\nlet myAge = 17;\r\nlet address = \"Rue de Landen 53A, 4280 Hannut\";\r\n\r\nconsole.log(`Bonjour, je m'appelle ${myName}, J'ai ${myAge} ans et j'habite à ${livesIn}`);"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Maintenant c'est plus facile à lire !\r\n\r\nPour utiliser **l'interpolation de chaîne** (string interpolation), nous utilisons des backticks (`\\`) au lieu de simples ou doubles guillemets ('' ou \"\"). Et `${}` lors de la définition d'une variable."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let myName = \"John\";\r\n\r\nlet myGreeting = \"Bonjour tout le monde! Je m'appelle \" + myName\r\n\r\nlet interpolatedString = `Bonjour tout le monde! Je m'appelle ${myName}`;"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "#### Ajouter des paramètres a une fonction"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Lorsque vous créez une fonction, vous pouvez définir des paramètres qui serviront de placeholders (ou \"marqueurs de position\") pour les valeurs qui seront passées dans la fonction. Cela vous permet de réutiliser la même fonction avec différentes valeurs.\r\n\r\nLes fonctions vous permettent de réutiliser une partie de votre code sans avoir à l'écrire à nouveau.\r\n\r\nDisons que nous avons un magasin et que chaque fois que quelqu'un entre, nous devons lui dire bonjour et ajouter 1 au nombre total de visiteurs. Cela serait l'équivalent du code suivant :\r\n\r\nSi nous avons seulement quelques personnes chaque jour, cela peut être gérable, mais que se passe-t-il si des centaines de personnes entrent chaque jour ?"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let totalVisitors = 0;\r\n\r\n// Person enters the shop\r\nconsole.log(\"Hello! Welcome to our shop\");\r\ntotalVisitors+=1;\r\n\r\n// Person enters the shop\r\nconsole.log(\"Hello! Welcome to our shop\");\r\ntotalVisitors += 1;\r\n\r\n// Person enters the shop\r\nconsole.log(\"Hello! Welcome to our shop\");\r\ntotalVisitors += 1;\r\n\r\n// Person enters the shop\r\nconsole.log(\"Hello! Welcome to our shop\");\r\ntotalVisitors += 1;\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Voici une solution à ce problème : les fonctions !"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function greetPerson() {\r\n    totalVisitors += 1;\r\n    console.log(\"Hello! Welcome to our shop\");\r\n}\r\n\r\nlet totalVisitors = 0;\r\n\r\n// Person enters the shop\r\ngreetPerson();\r\n\r\n// Person enters the shop\r\ngreetPerson();\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "C'est génial, mais que faire si nous voulions également dire le nom du client ? C'est là que les paramètres sont utiles."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function greetPerson(name) {\r\n    console.log(`Hello ${name}! Welcome to our shop`);\r\n}\r\n\r\nlet person1 = \"Jack\";\r\nlet person2 = \"Bob\";\r\nlet person3 = \"Alexander\";\r\n\r\ngreetPerson(person1);\r\ngreetPerson(person2);\r\ngreetPerson(person3);\r\n\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Pour ajouter un paramètre, il suffit d'ajouter un nom entre les parenthèses de la fonction. Ceci deviendra une variable qui contient les données de ce qui a été donné."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function greetPerson(name) {\r\n    console.log(`Hello ${name}! Welcome to our shop`);\r\n}\r\n\r\ngreetPerson(\"John\");"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Comme vous pouvez le voir, cela n'a pas besoin d'être un nom pour être utilisé. Cela peut même être un nombre."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function greetPerson(name) {\r\n    console.log(`Hello ${name}! Welcome to our shop`);\r\n}\r\n\r\ngreetPerson(24);"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Objets, Propriétés et Méthodes"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Les objets sont un groupement de variables et de fonctions.\r\n\r\nDans la vrai vie (pas la fausse), une voiture est un objet.\r\n\r\nUne voiture a des propriétés et des méthodes:\r\n\r\n| Propriétés                | Méthodes       \t        |\r\n|-----------------------\t|---------------\t        |\r\n| voiture.nom = Fiat        | voiture.démarer()         |\r\n| voiture.model = 500       | voiture.rouler()        \t|\r\n| voiture.poids = 850kg     | voiture.freiner()         |\r\n| voiture.couleur = blanc   | voiture.eteindre()        |\r\n\r\nToutes les voiture auront les meme propriété **mais** avec des **valeurs** différentes\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Propriété"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Pour créer un objet avec des propriétés (variables), dans des accolades, ajouter les propriété suivi de leurs valeurs\r\n\r\n> Un objet est un type de valeur donc n'oublier pas de le stocker dans une variable!"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const voiture = {\r\n    nom: \"Fiat\",\r\n    model: \"500\",\r\n    poids: \"850Kg\",\r\n    couleur: \"blanc\"\r\n};\r\n\r\nconsole.log(voiture);"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Les valeurs sont noté en pair de `nom:valeur` (nom et valeur séparer par un double point)"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Méthodes"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Pour créer un objet avec des méthodes (fonction), dans des accolades, ajouter les nom de méthode suivi de leurs fonction\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const personne = {\r\n    nom: \"Pierre\",\r\n    prenom: \"Vildesac\",\r\n    taille: 170,\r\n    poids: 85,\r\n    sePresenter: function() {\r\n        console.log(`Bonjour! Je suis ${this.nom} ${this.prenom}, je fait ${this.taille}cm et je pèse ${this.poids}kg.`); \r\n    }\r\n};\r\n\r\npersonne.sePresenter();"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Conditions"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Opérateurs"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "| Opérateur | Descriptions              | Exemple       \t        |\r\n|---------\t|-----------------------\t|---------------\t        |\r\n| <\t        | est inférieur à           | `5 < 10`                  |\r\n| >         | est supérieur à         \t| `10 > 1`         \t        |\r\n| <=  \t    | est inférieur ou égal à   | `4 <= 10` <br> `4 <= 4`   |\r\n| >=  \t    | est supérieur ou égal à   | `4 >= 2` <br> `4 >= 4`    |\r\n| ==        | est égal à                | `\"john\" == \"john\"`        |\r\n| !=        | est different de          | `\"john\" != \"pierre\"`      |\r\n> Tout les examples équivale la valeur `true`"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## L'instruction \"if\""
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Les blocs `if` sont des blocs de code qui seront executer uniquement si une `condition` l'accorde."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Syntaxe"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "#### Bloc If"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Pour définir une instruction `if`; nottez `if`, suivi de parenthese qui contienent une **expression booléenne** et enfin, un bloc de code"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "if (condition) {\r\n    //  Bloc de code à exécuter si la condition est vraie (true).\r\n} "
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "#### Expression booléenne"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Une expression booléenne est une expression qui donne une valeur booléenne. Par exemple, la valeur pour 5 > 3 est vrai et la valeur pour 5 < 4 est faux."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "console.log(\"5 > 3 : \" + (5 > 3));      // => true\r\nconsole.log(\"5 < 4 : \" + (5 < 4));      // => false\r\nconsole.log(\"10 == 10: \" + (10 == 10)); // => true\r\nconsole.log(\"5 != 10: \" + (5 != 10));   // => true\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Example"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "\nNous voulons accetper l'acces a un bar si l'utilisateur est majeur."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let age = 17;\r\n\r\nif (age >= 18) {\r\n    console.log(\"Bienvenue au bar!\");\r\n}"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## L'instruction \"else\""
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Les blocs else sont des blocs de code qui seront executer uniquement si un bloc if n'a pas été executé"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Syntaxe"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "if (condition) {\r\n    //  Bloc de code à exécuter si la condition est vraie (true).\r\n} else {\r\n    // Block de code à exècuter si la condition if est fausse (false).\r\n}"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Example"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "\nNous voulons accetper l'acces a un bar si l'utilisateur est majeur. Et lui dire de s'en aller si il est mineur"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let age = 17;\r\n\r\nif (age >= 18) {\r\n    console.log(\"Bienvenue au bar!\");\r\n} else {\r\n    console.log(\"Vas-t'en!\");\r\n}"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Boucle"
            ],
            "outputs": []
        }
    ]
}